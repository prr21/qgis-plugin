"""
/***************************************************************************
 NcfuPlugin
                                 A QGIS plugin
 Plugin with the many options
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Kurban M.K.
        email                : mr.gustav009@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# Главные импорты QGIS функционала
from qgis.core import *
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Инициализировать ресурсы Qt из файла resources.py
from .resources import *
# Импорт код для диалогового окна
from .ncfu_plugin_dialog import NcfuPluginDialog
# Прочие импорты
import os.path
import qgis.utils
from math import trunc


class NcfuPlugin:
    """Главный класс плагина QGIS."""

    def __init__(self, iface):
        """Конструктор. """
        # Сохранить ссылку на интерфейс QGIS
        self.iface = iface
        # инициализировать катол плагина
        self.plugin_dir = os.path.dirname(__file__)
        # инициализировать locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NcfuPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Объявить атрибуты экземпляра
        self.actions = []
        self.menu = self.tr(u'&NCFU KGI-161')

        # Проверить, был ли плагин запущен в первый раз в текущей сессии QGIS
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        return QCoreApplication.translate('NcfuPlugin', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Добавить значок панели инструментов на панель инструментов. """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Добавить значок плагина на панель инструментов плагинов
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Создать пункты меню и значки панели инструментов внутри графического интерфейса QGIS."""

        icon_path = ':/plugins/ncfu_plugin/icon.png' # путь до значка плагина
        self.add_action(
            icon_path,
            text=self.tr(u'Work with data'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # будет установлено False при run()
        self.first_start = True


    def unload(self):
        """Удаляет пункт меню и значок плагина из QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&NCFU KGI-161'),
                action)
            self.iface.removeToolBarIcon(action)

    def checkOnErrors(self,layer,dp):
        """Проверка всех условий"""
        if layer.geometryType() != 0:
            self.iface.messageBar().pushMessage("Выберите слой с точками!", Qgis.Warning )
            return False

        elif dp.fieldNameIndex('xcoord') == -1:
            self.lostAttr('xcoord')
            return False

        elif dp.fieldNameIndex('ycoord') == -1:
            self.lostAttr('ycoord')
            return False

        else: return True

    def createField(self,dp,way):
        """Создать новое поле"""
        
        dp.addAttributes([QgsField(way,QVariant.String)])
        print('Создан новый атрибут \"' +way+'\"')

    def convertToGraduses(self,ddd):
        """Конвертировать в градусы"""

        # Сократить число до определенного числа
        def toFixed(numObj, digits=0):
            return f"{numObj:.{digits}f}"

        countMs = self.dlg.spinBox.value() # Параметр сокращения миллисекунд

        # Формула перевода в градусную систему координат
        dd = trunc(ddd)                   # Граудсы = TRUNC(DDD)    
        mm = trunc( (ddd - dd) * 60 )     # Минуты  = TRUNC((DDD − DD) * 60)
        ss = ( (ddd-dd) * 60 - mm ) * 60  # Секунды = ((DDD − DD) * 60 − MM) * 60

        ss = toFixed(ss,countMs)
        ss = str(ss).replace('.', '\" ')

        # Переобразовать в читаемый формат
        grads = str(dd)+'° '+str(mm)+" \' "+ss

        return grads    

    def fillAttr(self,features, dp):
        """Заполнить атрибуты """
        
        xAttrInd = dp.fieldNameIndex('xcoord_grds')
        yAttrInd = dp.fieldNameIndex('ycoord_grds')

        # Цикл с точками
        for feat in features:

            # Получить значения десятичных координат
            valX = feat.attribute('xcoord')
            valY = feat.attribute('ycoord')

            # Результат конвертации присвоить новым переменным
            gradsX = self.convertToGraduses( valX )
            gradsY = self.convertToGraduses( valY )

            # Объявление новых атрибутов
            newXAttr = {xAttrInd : gradsX }
            newYAttr = {yAttrInd : gradsY }

            # Изменить значения атрибутов
            dp.changeAttributeValues({ feat.id(): newXAttr })
            dp.changeAttributeValues({ feat.id(): newYAttr })

    def run(self):
        """Главный запуск """

        if self.first_start == True:
            self.first_start = False  # смена значения у первого запуска
            self.dlg = NcfuPluginDialog() # установка диалогового окна
    
        # Поле из 
        cmBox = self.dlg.comboBox
        cmBox.clear()

        # показать диалоговое окно
        self.dlg.show()
        
        # Получить все слои QGIS
        allLayers = self.iface.mapCanvas().layers()
        showLayers = []

        for l in allLayers:
            showLayers.append(l.name())

        cmBox.addItems(showLayers)        

        # Запустить цикл событий диалога
        result = self.dlg.exec_()

        # Выполнить функционал после нажатия "ОК" в модальном окне
        if result:
            """ Главный алгоритм действий """
            layer = allLayers[ cmBox.currentIndex() ]
            if not layer:
                self.iface.messageBar().pushMessage("Слой не выбран", Qgis.Critical )
                return

            dp = layer.dataProvider()

            # Проверка поддерживаемости слоя
            if not self.checkOnErrors(layer,dp): return

            successMessage = "Координаты обновлены!"

            # Создать градусные атрибуты если их нет
            if dp.fieldNameIndex('xcoord_grds') == -1 or dp.fieldNameIndex('xcoord_grds') == -1:
                self.createField(dp,'xcoord_grds')
                self.createField(dp,'ycoord_grds')
                successMessage = "Координаты созданы!"

            features = layer.getFeatures()

            # Заполнить атрибуты 
            self.fillAttr(features, dp)

            # Обновить данные
            layer.updateFields()

            # Уведомить пользователя об успешном выполнении
            self.iface.messageBar().pushMessage(successMessage, Qgis.Success )
            print('Операция выполнена успешна!')

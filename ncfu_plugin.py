"""
/***************************************************************************
 NcfuPlugin
                                 A QGIS plugin
 Plugin with the many options
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Kurban M.K.
        email                : mr.gustav009@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# Импорты QGIS компонентов
from qgis.core import *
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Инициализировать ресурсы Qt из файла resources.py
from .resources import *

# Импорт код для диалогового окна
from .ncfu_plugin_dialog import NcfuPluginDialog

# Импорт классов
from .decimal_to_degree import DecimalToDegree
from .error_handler import ErrorHandler

# Прочие импорты
import os.path
import qgis.utils


class NcfuPlugin:
    """Главный класс плагина."""

    def __init__(self, iface):
        """Конструктор. """
        
        self.iface = iface                          # Сохранить ссылку на интерфейс QGIS
        self.infoBar = self.iface.messageBar()      # Сохранить ссылку на окне уведомлений
        self.plugin_dir = os.path.dirname(__file__) # Сохранить путь папки плагина

        # инициализировать locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NcfuPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Объявить атрибуты экземпляра
        self.actions = []
        self.menu = self.tr(u'&NCFU KGI-161')

        self.first_start = None # Проверка на первый запуск текущей сессии QGIS

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        return QCoreApplication.translate('NcfuPlugin', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Добавить значок панели инструментов на панель инструментов. """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Добавить значок плагина на панель инструментов плагинов
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Создать пункты меню и значки панели инструментов внутри графического интерфейса QGIS."""

        icon_path = ':/plugins/ncfu_plugin/icon.png' # путь до значка плагина
        self.add_action(
            icon_path,
            text=self.tr(u'Work with data'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # будет установлено False при run()
        self.first_start = True

    def unload(self):
        """Удаляет пункт меню и значок плагина из QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&NCFU KGI-161'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Главный запуск """

        if self.first_start == True:
            self.first_start = False        # смена значения у первого запуска
            self.dlg = NcfuPluginDialog()   # установка диалогового окна
       
    #    Получить значения из диалогового окна
        countMs = self.dlg.spinBox.value()
        cmBox   = self.dlg.comboBox
        x_coord = self.dlg.x_coord
        y_coord = self.dlg.y_coord
        cmBox.clear()

        self.dlg.show() # показать диалоговое окно
        
        # Получить все слои QGIS
        allLayers = self.iface.mapCanvas().layers()
        activeLayers = []

        for l in allLayers:
            activeLayers.append(l.name())

        cmBox.addItems(activeLayers)
        result = self.dlg.exec_()

        # Выполнить функционал после нажатия "ОК" в модальном окне
        if result:
            """ Главный алгоритм действий """

            layer = allLayers[ cmBox.currentIndex() ]  # Получить текущий слой

            # Если слой не подходит по условиям – отмена
            if not layer:
                self.infoBar.pushMessage("Слой не выбран", Qgis.Critical )
                return

            dp = layer.dataProvider()    # поставщик данных
            points = layer.getFeatures() # получить точки из слоя

            # Закончить если слой не прошел проверку
            gradErr = ErrorHandler(self.infoBar, layer, dp)

            if not gradErr.checkOnErrsGrad(): return

            # Создать экземпляр класса
            layGrads = DecimalToDegree(dp, points, x_coord, y_coord, countMs)

            # Создать атрибуты градусов
            layGrads.createField()
            self.infoBar.pushMessage("Данные обновлены", Qgis.Success )

            # Заполнить атрибуты градусов
            layGrads.fillAttr()

            # Обновить данные
            layer.updateFields()

            # Уведомить пользователя об успешном выполнении
            print('Операция выполнена успешна!')
            return
